{
    "contents" : "#' @title Circ.test\n#' \n#' @description\n#' Test the independent variation of circRNAs in relevant to their host genes. \n#' @param Circ CircRNACount file. A file of circRNA read count table. First three columns are circRNA coordinates, and followed by columns for circRNA read counts, each sample per column. \n#' @param Linear LinearCount file. A file of circRNA host gene expression count table. Same configuration as CircRNACount file.\n#' @param group A vector of group indicators.\n#' @param alpha p value cut off.\n#' @param plotsig If 'TRUE', significantly host-independently regulated circRNAs will be ploted.\n#' @examples\n#' data(Circ)\n#' data(Linear)\n#' test=Circ.test(Circ=Circ,Linear=Linear,group=c(rep(1,6),rep(2,6),rep(3,6)))\n#' View(test$sig.dat)\n#' # Plot one of them\n#' Circ.ratioplot(Circ,Linear,Coordinates,plotrow=rownames(test$sig.dat)[1],groupindicator1=c(rep('1days',6),rep('4days',6),rep('20days',6)),groupindicator2=rep(c(rep('Female',4),rep('Male',2)),3),lab_legend='Ages')\n#' @export Circ.test\n\nCirc.test <- function(Circ=Circ,Linear=Linear,group,alpha=0.05,plotsig=T){\n  # Requre packge\n  require(aod)\n  \n  # check whether the input matrix are correct\n  if ( nrow(Circ)!=nrow(Linear) | ncol(Circ) != ncol(Linear)){\n    stop('Circ data and Linear data are not matched, dimention different.')\n  }\n  \n  # A vector for pvalue\n  p.val <- c()\n  \n  # groups\n  if ( length(group) != ncol(Circ)-3 ){\n    stop(\"ength of 'group' must be equal to the number of samples of 'Circ' and 'Linear'. \")\n  }\n  group = factor(group)\n\n  ## test\n  # constract test matrix for each circRNA  \n  for ( i in rownames(Circ) ){\n    #print (i)    \n    # total read counts vector\n    tot <- round( as.numeric(Linear[i,c(4:ncol(Circ))]) + as.numeric(Circ[i,c(4:ncol(Linear))]) )\n\n    # circRNA read counts\n    circ <- as.numeric(Circ[i,c(4:ncol(Circ))])\n\n    \n    # if there is 0 in the total count vector, the model will fail. So permute 0 to 1\n    if ( 0 %in% tot ){\n      tot[tot==0]=1\n    }\n    \n    # Constract data frame\n    testdat = data.frame(tot,circ,group)\n    \n    ## do test\n    # Null model\n    fitNull <- betabin(cbind(circ,tot-circ) ~ 1, ~ 1, data=testdat)\n    # Alternative model\n    fitAlt <- betabin(cbind(circ,tot-circ) ~ group, ~ 1, data=testdat)\n    # test models\n    a <- anova(fitNull,fitAlt)\n    p.value <- a@anova.table[,11][2]\n    print(p.value)\n    p.val = c( p.val, p.value ) \n  }\n  \n  p.adj <- p.adjust(p.val,n=sum(!is.na(p.val)),'BH')\n  # select significant ones\n  sig_dat=Circ[p.adj<=alpha  & !is.na(p.adj),]\n  sig_p=p.adj[p.adj<=alpha  & !is.na(p.adj)]\n  # sort\n  sig_dat = sig_dat[order(sig_p),]\n  sig_p = sort(sig_p)\n  return(list(p.val=p.val,p.adj=p.adj,sig.dat=sig_dat,sig_p=sig_p))\n}",
    "created" : 1432569538015.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3508954128",
    "id" : "51A02575",
    "lastKnownWriteTime" : 1432841634,
    "path" : "~/Documents/Rat_project/CircTest/R/Circ.test.R",
    "project_path" : "R/Circ.test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}